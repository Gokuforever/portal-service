name: Deploy to Production

on:
  workflow_dispatch:
  push:
    branches: [master]
  release:
    types: [published]

jobs:
  deploy:
    runs-on: self-hosted
    environment: production
    permissions:
      contents: read
      packages: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        server-id: github
        server-username: GITHUB_ACTOR
        server-password: GITHUB_PACKAGES_TOKEN
    
    - name: Setup Maven
      uses: stCarolas/setup-maven@v4.5
      with:
        maven-version: 3.8.6
    
    - name: Build with Maven
      run: mvn clean install -Dmaven.test.skip=true
      env:
        GITHUB_PACKAGES_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Install Docker
      run: |
        # Update packages
        sudo apt-get update
        
        # Install dependencies
        sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
        
        # Add Docker's official GPG key
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
        
        # Add Docker repository
        sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
        
        # Update packages again
        sudo apt-get update
        
        # Install Docker
        sudo apt-get install -y docker-ce docker-ce-cli containerd.io
        
        # Add current user to docker group
        sudo usermod -aG docker $USER
        
        # Fix Docker socket permissions
        sudo chmod 666 /var/run/docker.sock
        
        # Verify Docker installation
        docker --version
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/gokuforever/portal-service
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=ref,event=branch
          type=sha
          latest
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Deploy to Production Server
      run: |
        # Ensure config directory exists
        mkdir -p /home/ubuntu/studeaze/config
        
        # Verify files in config directory
        echo "Files in config directory:"
        ls -la /home/ubuntu/studeaze/config/
        
        # Stop and remove existing container if it exists
        docker stop portal-service || true
        docker rm portal-service || true
        
        # Pull latest image
        docker pull ghcr.io/gokuforever/portal-service:latest
        
        # Run the container with proper configuration
        docker run -d \
          --name portal-service \
          --restart always \
          -p 8080:8080 \
          -e SE_ENV=/app/config \
          -e SPRING_PROFILES_ACTIVE=prod \
          --mount type=bind,source=/home/ubuntu/studeaze/config,target=/app/config \
          ghcr.io/gokuforever/portal-service:latest
        
        # Verify the mount
        echo "Verifying container mounts:"
        docker inspect portal-service | grep -A 10 Mounts
        
        # Check if files are visible inside the container
        echo "Files inside container:"
        docker exec portal-service ls -la /app/config || echo "Failed to list files in container" 