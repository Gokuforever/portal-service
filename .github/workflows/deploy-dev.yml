name: Deploy to Production

on:
  workflow_dispatch:
  push:
    branches: [ dev ]
  release:
    types: [ published ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
          server-id: github
          server-username: GITHUB_ACTOR
          server-password: GITHUB_PACKAGES_TOKEN

      - name: Setup Maven
        uses: stCarolas/setup-maven@v4.5
        with:
          maven-version: 3.8.6

      - name: Build with Maven
        run: mvn clean install -Dmaven.test.skip=true
        env:
          GITHUB_PACKAGES_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/gokuforever/portal-service
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=ref,event=branch
            type=sha
            latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: portal-ec2
    environment: development
    permissions:
      contents: read
      packages: read

    steps:
      - name: Login to GitHub Container Registry on EC2
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to Production Server
        run: |
          echo "======== DEPLOYMENT STARTED ========"

          mkdir -p /home/ubuntu/studeaze/config
          mkdir -p /home/ubuntu/studeaze/logs
          
          echo "*** Gracefully stopping application ***"
          if docker ps -q -f name=portal-service | grep -q .; then
            docker exec portal-service sh -c "kill -15 1" || true
            timeout 5s sh -c 'until ! docker ps -q -f name=portal-service | grep -q .; do sleep 0.5; done' || true
            docker stop portal-service --time=3 || true
            docker rm portal-service || true
          fi
          
          echo "*** Pulling latest image ***"
          docker pull ghcr.io/gokuforever/portal-service:latest
          if [ $? -ne 0 ]; then
            echo "ERROR: Failed to pull the image. Checking Docker login status."
            docker login -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }} ghcr.io
            docker pull ghcr.io/gokuforever/portal-service:latest || exit 1
          fi
          
          echo "*** Starting container ***"
          docker run -d \
            --name portal-service \
            --restart always \
            -p 443:443 \
            -e SE_ENV=/app/config \
            -e SPRING_PROFILES_ACTIVE=dev \
            -e LOG_DIR=/app/logs \
            --mount type=bind,source=/home/ubuntu/studeaze/config,target=/app/config \
            --mount type=bind,source=/home/ubuntu/studeaze/logs,target=/app/logs \
            --mount type=bind,source=/home/ubuntu/api.studeaze.in.keystore.p12,target=/app/ssl/api.studeaze.in.p12 \
            ghcr.io/gokuforever/portal-service:latest
          
          echo "*** Verifying deployment ***"
          docker ps | grep portal-service || (docker logs portal-service && exit 1)
          
          echo "======== DEPLOYMENT COMPLETED ========"